mirostat=0, mirostat_eta=0.1, mirostat_tau=5.0
num_ctx=4608, num_keep=5, repeat_last_n=64, repeat_penalty=1.2
temperature=1.0, seed=-1, tfs_z=1.0, num_predict=-1
top_k=40, top_p=0.9, min_p=0.4

==================== Generated Output ====================
{"qkv": "Input tensor shape (batch_size, seqlen, 3, nheads, headdim) for flash_attn_qkvpacked_func and FlashAttnQKVPackedFunc.apply", 
"dropout_p": "Dropout probability used in attention_pytorch, flash_attn_qkvpacked_func, and FlashAttnQKVPackedFunc.apply",
"softmax_scale": "Scaling of QK^T before applying softmax in attention_pytorch, flash_attn_qkvpacked_func, and FlashAttnQKVPackedFunc.apply",
"causal": "Whether to apply causal attention mask (e.g., for auto-regressive modeling) used in attention_pytorch, flash_attn_qkvpacked_func, and FlashAttnQKVPackedFunc.apply", 
"window_size": "Context window size when implementing sliding window local attention in flash_attn_qkvpacked_func and FlashAttnQKVPackedFunc.apply",
"alibi_slopes": "Bias of (-alibi_slope * |i - j|) added to the attention score used in flash_attn_qkvpacked_func and FlashAttnQKVPackedFunc.apply", 
"deterministic": "Whether to use deterministic implementation of backward pass for faster computation but uses more memory, used in flash_attn_qkvpacked_func and FlashAttnQKVPackedFunc.apply",
"return_softmax": "Optionally return the attention probabilities (not guaranteed correct) when dropout probability > 0", 
"batch_size": "Batch size hyperparameter used to compute flops for time_fwd_bwd function, also determines input tensor shape in benchmarks.benchmark_flash_attention/time_f_b -> benchmarks.benchmark_flash_attention/benchmarks.benchmark_flash_attention.time_b",
"seqlen": "Sequence length hyperparameter used to compute flops for time_fwd_bwd function", 
"Headdim": "Heads dimension size of attention mechanism, determines the input tensor shape in flash_attn_qkvpacked_func and FlashAttnQKVPackedFunc.apply"}
 
 

